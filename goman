#!/usr/bin/env bash

set -e

sdkRoot=${GOSDK_ROOT:-/var/lib/golang}
dlPage=${GOSDK_DOWNLOAD_PAGE:-https://golang.google.cn/dl}
tipRepo=${GOSDK_TIP_REPO:-https://gitee.com/mirrors/go.git}

name=${0##*/}

versionMatch='[1-9]\.[0-9]+(((rc|beta)[0-9]*)|(\.[0-9]+))?'
allVersionMatch="go${versionMatch}"
unstableVersionMatch='go[1-9]\.[0-9]+(rc|beta)[0-9]*'
stableVersionMatch='go[1-9]\.[0-9]+(\.[0-9]+)?'

checkRoot() {
    if [ "$(id -u)" -ne 0 ]; then
        echo "需要Root权限，请使用: sudo goman ..."
        exit
    fi
}

downloadTip() {
    echo "$1 没有下载, 请先使用 \`${name} download $1\` 下载."
    exit 1
}

checkVersion() {
    if [ -z "$1" ]; then
        echo help
        return 0
    else
        case $1 in
        -h | --help | help)
            echo help
            return 0
            ;;
        *)
            if [ $1 == "tip" -o $1 == "gotip" ]; then
                echo gotip
                return 0
            fi

            if [[ "$1" =~ ^(go)?${versionMatch}$ ]]; then
                if [[ $1 =~ ^go ]]; then
                    echo "$1"
                else
                    echo "go$1"
                fi
                return 0
            fi

            echo "版本 \`$1\` 格式错误, 或命令不存在"
            return 1
            ;;
        esac
    fi
}

getInstalledVersions() {
    ls ${sdkRoot}/*/.unpacked-success |
        grep -Eo ${allVersionMatch} |
        sed 's/go//g; s/b/.b/g; s/r/.r/g; s/$/&.s/g' |
        sort -urV |
        sed 's/\.s$//g; s/.r/r/g; s/.b/b/g'
}

getRemoteVersions() {
    curl -SsL ${dlPage} |
        grep -Eo $1 |
        sed 's/go//g; s/b/.b/g; s/r/.r/g; s/$/&.s/g' |
        sort -urV |
        sed 's/\.s$//g; s/.r/r/g; s/.b/b/g' |
        head -n 100 |
        awk '{if(NR%5==0){printf "%s\n", $0}else{printf "%-12s", $0}}'
    echo
}

list() {
    while getopts hiau option; do
        case $option in
        i)
            echo "已安装版本"
            getInstalledVersions | awk '{if(NR%5==0){printf "%s\n", $0}else{printf "%-12s", $0}}'
            echo
            exit 0
            ;;
        a)
            echo "所有版本"
            getRemoteVersions ${allVersionMatch}
            exit 0
            ;;
        u)
            echo "非稳定版本"
            getRemoteVersions ${unstableVersionMatch}
            exit 0
            ;;
        *)
            echo "列出版本号"
            echo ""
            echo "Usage:"
            echo "    ${name} list [Flags]:"
            echo ""
            echo "Flags:"
            echo "    -a    列出所有可安装的版本号"
            echo "    -u    仅列出非稳定版本号"
            echo "    -i    list installed versions"
            exit 2
            ;;
        esac
    done

    echo "稳定版本"
    getRemoteVersions ${stableVersionMatch}
}

download() {
    version=$(checkVersion $1)
    if [ "$?" -ne 0 ]; then
        echo ${version}
        exit 1
    fi

    if [ "${version}" == "help" ]; then
        echo "下载指定版本"
        echo ""
        echo "Usage:"
        echo "  ${name} download <version>"
        echo ""
        echo "Example:"
        echo "  ${name} download go1.17rc1"
        echo "  ${name} download go1.16.6"
        exit 1
    fi

    if [ -f "${sdkRoot}/${version}/.unpacked-success" ]; then
        echo "该版本 ${version} 已经下载, 可使用 \`${name} install ${version}\` 来安装这个版本"
        echo "如果您要重新下载该版本, 请先使用 \`${name} remove ${version}\` 删除它"
        exit 0
    fi

    checkRoot

    goos=$(uname | tr 'A-Z' 'a-z')
    goarch=$(uname -m | tr 'A-Z' 'a-z')

    case ${goarch} in
    arm_64 | arm64)
        goarch=arm64
        ;;
    x86_64)
        goarch=amd64
        ;;
    x86)
        goarch=386
        ;;
    esac

    if [ "${goos}" == "linux" ]; then
        case ${goarch} in
        amd64 | 386 | arm64) ;;
        armv7 | armv7l | armv6 | armv6l)
            goarch=armv6l
            ;;
        armv8)
            goarch=arm64
            ;;
        ppc64le)
            goarch=ppc64le
            ;;
        s390x)
            goarch=ppc64le
            ;;
        *)
            echo "不支持的平台架构: ${goarch}"
            ;;
        esac
    fi

    url="${dlPage}/${version}.${goos}-${goarch}.tar.gz"

    echo "下载版本: ${version}， 地址: ${url}"

    GOROOT=${sdkRoot}/${version}
    rm -rf ${GOROOT}
    mkdir -p ${GOROOT}
    curl -L --progress-bar ${url} | tar -C ${GOROOT} --strip-components 1 -zx
    touch ${GOROOT}/.unpacked-success
    GOROOT=${GOROOT} ${GOROOT}/bin/go version
    echo "下载完成"
}

remove() {
    version=$(checkVersion $1)
    if [ "$?" -ne 0 ]; then
        echo ${version}
        exit 1
    fi

    if [ "${version}" == "help" ]; then
        echo "删除版本"
        echo ""
        echo "Usage:"
        for v in $(getInstalledVersions); do
            echo "  ${name} remove ${v}"
        done
        exit 1
    fi

    checkRoot
    local version=go${version}
    local dir_version=${sdkRoot}/${version}
    local dir_current=${sdkRoot}/current
    local dir_cur_link=$(readlink ${dir_current})

    echo "开始卸载: ${version}"

    if [ -d "${dir_version}" ]; then
        echo "删除目录: ${dir_version}"
        rm -rf ${dir_version}
        echo "删除成功!"
    fi

    if [ "${dir_cur_link}" = "${dir_version}" ]; then
        echo "删除链接: ${dir_current} -> ${dir_cur_link}"
        echo "删除链接: /usr/local/bin/go -> $(readlink /usr/local/bin/go)"
        echo "删除链接: /usr/local/bin/gofmt -> $(readlink /usr/local/bin/go)"
        rm -f ${dir_current} /usr/local/bin/go /usr/local/bin/gofmt
        echo "删除成功!"
        local dir_new_version="$(
            ls ${sdkRoot} |
                grep -Eo ${versionMatch} |
                sed 's/go//g; s/b/.b/g; s/r/.r/g; s/$/&.s/g' |
                sort -urV |
                sed 's/\.s$//g; s/.r/r/g; s/.b/b/g' |
                head -n1
        )"
        if [ -n "${dir_new_version}" ]; then
            echo "切换版本: ${dir_new_version}"
            ln -fs "${sdkRoot}/go${dir_new_version}" ${dir_current}
            ln -fs ${dir_current}/bin/go /usr/local/bin/go
            ln -fs ${dir_current}/bin/gofmt /usr/local/bin/gofmt
            echo "当前版本: $(/usr/local/bin/go version)"
        fi
    fi
    echo "删除完成!"
}

installTip() {
    set -x
    local dir_version=${sdkRoot}/gotip
    if [ -d "${dir_version}/.git" ]; then
        local repo=$(git -C /opt/golang/gotip remote get-url origin)
        if [ "${repo}" != "${tipRepo}" ]; then
            git -C ${dir_version} remote set-url origin ${tipRepo}
        fi
    else
        rm -rf ${dir_version}
        git clone --depth=1 ${tipRepo} ${dir_version}
    fi

    git -C ${dir_version} fetch origin master
    git -C ${dir_version} -c advice.detachedHead=false checkout FETCH_HEAD
    git -C ${dir_version} clean -i -d
    cd ${dir_version}/src
    GOROOT_BOOTSTRAP=$(go env GOROOT) ${dir_version}/src/make.bash
    ln -fs ${dir_version}/bin/go /usr/local/bin/gotip
}

install() {
    if [ $1 == "tip" -o $1 == "gotip" ]; then
        installTip
        exit 0
    fi

    version=$(checkVersion $1)
    if [ "$?" -ne 0 ]; then
        echo ${version}
        exit 1
    fi

    if [ "${version}" == "help" ]; then
        echo "install version"
        echo ""
        echo "Usage:"
        for v in $(getInstalledVersions); do
            echo "  ${name} install ${v}"
        done
        exit 1
    fi

    checkRoot

    GOROOT=${sdkRoot}/${version}
    if [ -f "${GOROOT}/.unpacked-success" ]; then
        rm -f ${sdkRoot}/current
        ln -fs ${GOROOT} ${sdkRoot}/current
        ln -fs ${GOROOT}/bin/go /usr/local/bin/go
        ln -fs ${GOROOT}/bin/gofmt /usr/local/bin/gofmt
        go version
    else
        downloadTip ${version}
    fi
}

main() {
    version=$(checkVersion $1)
    if [ "$?" -ne 0 ]; then
        echo "unknown command: $1"
        exit 1
    fi

    if [ "${version}" == "help" ]; then
        echo "管理golang sdk的版本"
        echo ""
        echo "Usage:"
        echo "    ${name} [Command] [Flags]:"
        echo "    ${name} <version> [go command and flags]"
        echo ""
        echo "Example:"
        echo "    goman 1.16.8 build"
        echo ""
        echo "Available Commands:"
        echo "    list, ls          列出版本"
        echo "    download, dl      下载"
        echo "    install, i        安装"
        echo "    remove, rm        删除"
        echo ""
        exit 1
    fi

    GOROOT=${sdkRoot}/${version}
    if [ -f "${GOROOT}/.unpacked-success" ]; then
        GOROOT=${GOROOT} ${GOROOT}/bin/go ${@:2}
    else
        downloadTip ${version}
    fi
}

case $1 in
list | ls)
    list ${@:2}
    ;;
download | dl)
    download ${@:2}
    ;;
install | i)
    install ${@:2}
    ;;
remove | rm)
    remove ${@:2}
    ;;
*)
    main $@
    ;;
esac
